# -*- coding: utf-8 -*-
"""
Created on Tue Nov  8 14:16:33 2016

@author: sjoukjeijlstra 140001917
"""
import numpy.linalg
from numpy import *
from pylab import *

# Question 1 

def f(x):
    f = (1.0-(x**2))*sin(2.0*pi*x)
    return f
    
x = linspace(-1, 2, 150)

# The data points are equally spaced on [-1, 2] for polynomials degree n = 6 and n = 10

h0 = []  
for i in xrange(0, 7, 1):
    a = f(-1.0 + 0.5*i)
    h0.append([-1.0 + (0.5*i), a])
#plot(*zip(*h0), marker='o', color='r', ls='')
#xlim([-1,2])
    
j = []
for i in xrange(0, 11, 1):
    a = f(-1.0 + 0.3*i)
    j.append([-1.0+ (0.3*i), a])
#plot(*zip(*j), marker='o', color='b', ls='')
#xlim([-1,2])
#grid(True)
#show()

a = [[1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0], 
    [(-0.5)**6, (-0.5)**5, (-0.5)**4, (-0.5)**3, (-0.5)**2, (-0.5)**1, (-0.5)**0], 
    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], 
    [(0.5)**6, (0.5)**5, (0.5)**4, (0.5)**3, (0.5)**2, (0.5)**1, (0.5)**0],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 
    [(1.5)**6, (1.5)**5, (1.5)**4, (1.5)**3, (1.5)**2, (1.5)**1, (1.5)**0], 
    [(2.0)**6, (2.0)**5, (2.0)**4, (2.0)**3, (2.0)**2, (2.0)**1, (2.0)**0]]
b = [0.0,0.0,0.0,0.0,0.0,0.0,0.0]
 
c = [[1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0], 
     [(-0.7)**10, (-0.7)**9, (-0.7)**8, (-0.7)**7, (-0.7)**6, (-0.7)**5, (-0.7)**4, (-0.7)**3, (-0.7)**2, (-0.7)**1, 1.0], 
     [(-0.4)**10, (-0.4)**9, (-0.4)**8, (-0.4)**7, (-0.4)**6, (-0.4)**5, (-0.4)**4, (-0.4)**3, (-0.4)**2, (-0.4)**1, 1.0], 
     [(-0.1)**10, (-0.1)**9, (-0.1)**8, (-0.1)**7, (-0.1)**6, (-0.1)**5, (-0.1)**4, (-0.1)**3, (-0.1)**2, (-0.1)**1, 1.0], 
     [(0.2)**10, (0.2)**9, (0.2)**8, (0.2)**7, (0.2)**6, (0.2)**5, (0.2)**4, (0.2)**3, (0.2)**2, (0.2)**1, 1.0], 
     [(0.5)**10, (0.5)**9, (0.5)**8, (0.5)**7, (0.5)**6, (0.5)**5, (0.5)**4, (0.5)**3, (0.5)**2, (0.5)**1, 1.0], 
     [(0.8)**10, (0.8)**9, (0.8)**8, (0.8)**7, (0.8)**6, (0.8)**5, (0.8)**4, (0.8)**3, (0.8)**2, (0.8)**1, 1.0], 
     [(1.1)**10, (1.1)**9, (1.1)**8, (1.1)**7, (1.1)**6, (1.1)**5, (1.1)**4, (1.1)**3, (1.1)**2, (1.1)**1, 1.0], 
     [(1.4)**10, (1.4)**9, (1.4)**8, (1.4)**7, (1.4)**6, (1.4)**5, (1.4)**4, (1.4)**3, (1.4)**2, (1.4)**1, 1.0], 
     [(1.7)**10, (1.7)**9, (1.7)**8, (1.7)**7, (1.7)**6, (1.7)**5, (1.7)**4, (1.7)**3, (1.7)**2, (1.7)**1, 1.0],
     [2.0**10, 2.0**9, 2.0**8, 2.0**7, 2.0**6, 2.0**5, 2.0**4, 2.0**3, 2.0**2, 2.0**1, 1.0]]
d = [0.0, 0.485, -0.494, -0.582, 0.913, 0.0, -0.342, -0.123, -0.564, 1.797, 0.0]

x1 = linalg.solve(a, b)
x2 = linalg.solve(c, d)

def gline(x):
    g = x1[0]*x**6 + x1[1]*x**5 + x1[2]*x**4 + x1[3]*x**3 + x1[4]*x**2 + x1[5]*x**1 + x1[6]
    return g

def hline(x):
    h = x2[0]*x**10 + x2[1]*x**9 + x2[2]*x**8 + x2[3]*x**7 + x2[4]*x**6 + x2[5]*x**5 + x2[6]*x**4 + x2[7]*x**3 + x2[8]*x**2 + x2[9]*x**1 + x2[10]
    return h
    
plot(x, f(x))
plot(x, gline(x))
plot(x, hline(x))
grid(True)
axis([-1, 2, -5, 5])
show()

# Finding the maximum error for n = 6:

for i in xrange(0, 7):
    x = linspace(-1, 2)
    diff = abs(f(x)- gline(x))
    
# the maximum difference of all differences is:

maxdiff = amax(diff) #which is true 

# 7th derivative of f(x) 

def derivative7():
    x = linspace(-1,2, 100)
    derivative7 = -1344.0*pi**5*cos(2*pi*x) - 128.0*(pi**7)*(1.0 - x**2)*cos(2.0*pi*x) + 896.0*(pi**6)*x*sin(2.0*pi*x)
    maxderivative7 = amax(abs(derivative7))
    return maxderivative7
    
error1 = (1.0/(7.0*6.0*5.0*4.0*3.0*2.0*1.0))*maxdiff*derivative7()
print "Maximum error at n = 6: ", error1

# Finding the maximum error for n = 10:

for i in xrange(0, 11):
    x = linspace(-1, 2)
    diff1 = abs(f(x)- hline(x))
    #Somehow have to use the product to get max(product(0-7)(x-xk))???
    
# the maximum difference of all differences is:

maxdiff1 = amax(diff1) #which is true 

def derivative11():
    x = linspace(-1,2, 100)
    derivative11 = -56320.0*(pi**9)*cos(2.0*pi*x) - 2048.0*(pi**11)*(1 - x**2)*cos(2.0*pi*x) + 22528.0*(pi**10)*x*sin(2.0*pi*x)
    maxderivative11 = amax(abs(derivative11))
    return maxderivative11
    
error2 = (1.0/(11.0*10.0*9.0*8.0*7.0*6.0*5.0*4.0*3.0*2.0*1.0))*maxdiff1*derivative11()

print "Maximum error at n = 10:", error2

# Question 2

# For n = 6, we require 7 points i.e. Chebyshev roots of the Chebyshev polynomial T_7(x)
y = linspace(-1,2,150)
coeff = [64.0, 0.0, -112.0, 0.0, 56.0, 0.0, -7.0, 0.0]
r = sort(roots(coeff))

############### CHEBYSHEV POLYNOMIAL APPROXIMATION: NODES FOR N+1=7

nodes = []
for i in xrange(0, 7):
    xk = 0.5 + 1.5*r[i]
    nodes.append(xk)

def chebyshevnodes():
    
    b = []  
    for i in xrange(0, 7):
        x = f(nodes[i])
        b.append([nodes[i], x])
    plot(*zip(*b), marker='o', color='r', ls='')
    
def t_7(x):
    t7 = 64*x**7 - 112*x**5 + 56*x**3 - 7*x
    return t7
    
def t_6(x):
    t6 = 32*x**6-48*x**4+18*x**2-1
    return t6
    
x = linspace(-1, 2, 150)    
chebyshevnodes()
plot(x, f(x))
plot(x, t_7(x))
axis([-1, 2, -5, 5])
grid(True)
show()



############### CHEBYSHEV POLYNOMIAL APPROXIMATION: NODES FOR N+1=11

nodes1 = []
for i in xrange(0, 11):
    xk = 0.5 + 1.5*r1[i]
    nodes1.append(xk)

def chebyshevnodes1():
    
    b1 = []  
    for i in xrange(0, 11):
        x = f(nodes1[i])
        b1.append([nodes1[i], x])
    plot(*zip(*b1), marker='o', color='b', ls='')
    
def t_10(x):
    t = 512*x**10 -1280*x**8 + 1120*x**6 - 400*x**4 +(50*(x**2))-1
    return t
    
def t_11(x):
    t = 1024*x**11 - 2816*x**9 + 2816*x**7 - 1232*x**5 + 220*x**3 - 11*x 
    return t
    
x = linspace(-1, 2, 150)
chebyshevnodes1()
#plot(x, hline(x))
plot(x, f(x))
plot(x, t_10(x))
axis([-1, 2, -5, 5])
grid(True)
show()





###############

# We use the array of Chebyshev points r[i] to get a new set of points

s = []
for i in xrange(0, 7):
    s.append([r[i], f(r[i])])

# Recreate matrices n = 6 like before

a1 = [[s[0][0]**6, s[0][0]**5, s[0][0]**4, s[0][0]**3, s[0][0]**2, s[0][0]**1, s[0][0]**0], 
     [s[1][0]**6, s[1][0]**5, s[1][0]**4, s[1][0]**3, s[1][0]**2, s[1][0]**1, s[1][0]**0], 
     [s[2][0]**6, s[2][0]**5, s[2][0]**4, s[2][0]**3, s[2][0]**2, s[2][0]**1, s[2][0]**0],
     [s[3][0]**6, s[3][0]**5, s[3][0]**4, s[3][0]**3, s[3][0]**2, s[3][0]**1, s[3][0]**0], 
     [s[4][0]**6, s[4][0]**5, s[4][0]**4, s[4][0]**3, s[4][0]**2, s[4][0]**1, s[4][0]**0],
     [s[5][0]**6, s[5][0]**5, s[5][0]**4, s[5][0]**3, s[5][0]**2, s[5][0]**1, s[5][0]**0], 
     [s[6][0]**6, s[6][0]**5, s[6][0]**4, s[6][0]**3, s[6][0]**2, s[6][0]**1, s[6][0]**0]]
b1 = [s[0][1],s[1][1], s[2][1], s[3][1], s[4][1], s[5][1], s[6][1]]

x3 = linalg.solve(a1, b1)

g1 = x3[0]*y**6 + x3[1]*y**5 + x3[2]*y**4 + x3[3]*y**3 + x3[4]*y**2 + x3[5]*y**1 + x3[6]

#plot(y, g1)

# For n = 10, we require 11 points i.e. Chebyshev roots of the Chebyshev polynomial T_11(x)

coeff1 = [1024, 0, -2816, 0, 2816, 0, -1232, 0, 220, 0, -11, 0]
r1 = sort(roots(coeff1))
m1 = r1[0]*y**10 + r1[1]*y**9 + r1[2]*y**8 + r1[3]*y**7 + r1[4]*y**6 +r1[5]*y**5 + r1[6]*y**4 + r1[7]*y**3 + r1[8]*y**2 + r1[9]*y**1 + r1[10]*y**0 

h1 = []
for i in xrange(0, 11):
    h1.append([r1[i], 0])
    
#plot(y, f(y))
#axis([-1, 2, -1, 3])
#grid(True)

# We use the array of Chebyshev points r[i] to get a new set of points

s1 = []
for i in xrange(0, 11):
    s1.append([r1[i], f(r1[i])])  
    
c1 = [[s1[0][0]**10, s1[0][0]**9, s1[0][0]**8, s1[0][0]**7, s1[0][0]**6, s1[0][0]**5, s1[0][0]**4, s1[0][0]**3, s1[0][0]**2, s1[0][0]**1, 1], 
     [s1[1][0]**10, s1[1][0]**9, s1[1][0]**8, s1[1][0]**7, s1[1][0]**6, s1[1][0]**5, s1[1][0]**4, s1[1][0]**3, s1[1][0]**2, s1[1][0]**1, 1], 
     [s1[2][0]**10, s1[2][0]**9, s1[2][0]**8, s1[2][0]**7, s1[2][0]**6, s1[2][0]**5, s1[2][0]**4, s1[2][0]**3, s1[2][0]**2, s1[2][0]**1, 1],
     [s1[3][0]**10, s1[3][0]**9, s1[3][0]**8, s1[3][0]**7, s1[3][0]**6, s1[3][0]**5, s1[3][0]**4, s1[3][0]**3, s1[3][0]**2, s1[3][0]**1, 1], 
     [s1[4][0]**10, s1[4][0]**9, s1[4][0]**8, s1[4][0]**7, s1[4][0]**6, s1[4][0]**5, s1[4][0]**4, s1[4][0]**3, s1[4][0]**2, s1[4][0]**1, 1], 
     [s1[5][0]**10, s1[5][0]**9, s1[5][0]**8, s1[5][0]**7, s1[5][0]**6, s1[5][0]**5, s1[5][0]**4, s1[5][0]**3, s1[5][0]**2, s1[5][0]**1, 1],
     [s1[6][0]**10, s1[6][0]**9, s1[6][0]**8, s1[6][0]**7, s1[6][0]**6, s1[6][0]**5, s1[6][0]**4, s1[6][0]**3, s1[6][0]**2, s1[6][0]**1, 1], 
     [s1[7][0]**10, s1[7][0]**9, s1[7][0]**8, s1[7][0]**7, s1[7][0]**6, s1[7][0]**5, s1[7][0]**4, s1[7][0]**3, s1[7][0]**2, s1[7][0]**1, 1], 
     [s1[8][0]**10, s1[8][0]**9, s1[8][0]**8, s1[8][0]**7, s1[8][0]**6, s1[8][0]**5, s1[8][0]**4, s1[8][0]**3, s1[8][0]**2, s1[8][0]**1, 1],
     [s1[9][0]**10, s1[9][0]**9, s1[9][0]**8, s1[9][0]**7, s1[9][0]**6, s1[9][0]**5, s1[9][0]**4, s1[9][0]**3, s1[9][0]**2, s1[9][0]**1, 1], 
     [s1[10][0]**10, s1[10][0]**9, s1[10][0]**8, s1[10][0]**7, s1[10][0]**6, s1[10][0]**5, s1[10][0]**4, s1[10][0]**3, s1[10][0]**2, s1[10][0]**1, 1]]
d1 = [s1[0][1], s1[1][1], s1[2][1], s1[3][1], s1[4][1], s1[5][1], s1[6][1], s1[7][1], s1[8][1], s1[9][1], s1[10][1]]

x4 = linalg.solve(c1, d1)

h1 = x4[0]*y**10 + x4[1]*y**9 + x4[2]*y**8 + x4[3]*y**7 + x4[4]*y**6 + x4[5]*y**5 + x4[6]*y**4 + x4[7]*y**3 + x4[8]*y**2 + x4[9]*y**1 + x4[10]

#plot(y, h1)
#plot(y, f1)
#axis([-1, 2, -1, 1])
#grid(True)
#show()

# Question 3 

# h = (b-a)/n = (2 + 1)/6 = 1/2
# (1/0.5)**3 = 2**3 = 8

amatrix = [[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 
          [1.0, 4.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 4.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 4.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 1.0, 4.0, 1.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 1.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]]
          
bmatrix = [f(-1.0), 6*f(-0.5), 6*f(0.0), 6*f(0.5), 6*f(1.0), 6*f(1.5), f(2.0)]

x11 = linalg.solve(amatrix, bmatrix)

a_minus1 = 2*x11[0]-x11[1]
a_nplus1 = 2*x11[6]-x11[5]

fullA = hstack((a_minus1, x11, a_nplus1))
t = fullA.tolist()

#plot(x, f(x))

# interval [-1, -0.5]

x5 = linspace(-1, -0.5, 100)
spline1 = t[0]*(-(1/6)*(x+0.5)**3) + t[1]*((1/12) + 0.5*x*(x+1)**2) + t[2]*((1/12)-0.5*(x+1.5)*(x+0.5)**2) + t[3]*((1/6)*(x+1)**3)
#plot(x5, spline1)

# interval [-0.5, 0.0]

x5 = linspace(-0.5,0.0, 100)
spline2 = t[1]*(-(1/6)*(x+0.5)**3) + t[2]*((1/12) + 0.5*x*(x+1)**2) + t[3]*((1/12)-0.5*(x+1.5)*(x+0.5)**2) + t[4]*((1/6)*(x+1)**3)
#plot(x5, spline2)

# interval [0.0, 0.5]

x6 = linspace(0.0, 0.5, 100)
spline3 = t[2]*(-(1/6)*(x+0.5)**3) + t[3]*((1/12) + 0.5*x*(x+1)**2) + t[4]*((1/12)-0.5*(x+1.5)*(x+0.5)**2) + t[5]*((1/6)*(x+1)**3)
#plot(x6, spline3)
